using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Triangle;

namespace GeometryTest {

    [TestClass]
    public class GeometryTest {

        [TestMethod]
        public void GetSquareOfRightTriangleTest1() {
            for ( double a = 0.1; a < 10000; a++ ) {
                for (double b = 0.1; b < 1000; b++) {
                    var expected = a * b / 2;
                    var c = Math.Sqrt( a*a + b*b );
                    var res = Geometry.GetSquareOfRightTriangle( a, b, c);
                    Assert.AreEqual( res, expected );
                    res = Geometry.GetSquareOfRightTriangle( a, c, b );
                    Assert.AreEqual( res, expected );
                    res = Geometry.GetSquareOfRightTriangle( c, b, a );
                    Assert.AreEqual( res, expected );
                    res = Geometry.GetSquareOfRightTriangle( c, a, b );
                    Assert.AreEqual(res, expected);
                    res = Geometry.GetSquareOfRightTriangle( b, c, a );
                    Assert.AreEqual(res, expected);
                    res = Geometry.GetSquareOfRightTriangle( b, a, c );
                    Assert.AreEqual(res, expected);
                }
            }
        }

        [TestMethod]
        public void GetSquareOfRightTriangleTest2() {
            double res = -1;
            for ( double a = 0.1; a < 1000; a++ ) {
                for (double b = 0.1; b < 100; b++) {
                    var c = Math.Sqrt( a*a + b*b ) + 0.1;
                    try {
                        res = Geometry.GetSquareOfRightTriangle(a, b, c);
                        res = Geometry.GetSquareOfRightTriangle(a, c, b);
                        res = Geometry.GetSquareOfRightTriangle(b, c, a);
                        res = Geometry.GetSquareOfRightTriangle(b, a, c);
                        res = Geometry.GetSquareOfRightTriangle(c, b, a);
                        res = Geometry.GetSquareOfRightTriangle(c, a, b);
                    }
                    catch (Geometry.NotRightTriangleException) {
                        continue;
                    }
                }
            }
            Assert.AreEqual( res, -1 );
        }

        [TestMethod]
        [ExpectedException(typeof(Geometry.NotRightTriangleException))]
        public void GetSquareOfRightTriangleTest3() {
            Geometry.GetSquareOfRightTriangle( 3, 3, 3 );
        }

        [TestMethod]
        [ExpectedException(typeof (Geometry.InputLessThanOrEqualZeroException))]
        public void GetSquareOfRightTriangleTest4() {
            Geometry.GetSquareOfRightTriangle(0, 0, 0);
            Geometry.GetSquareOfRightTriangle(0, 1, 0);
            Geometry.GetSquareOfRightTriangle(0, 0, 1);
            Geometry.GetSquareOfRightTriangle(0, 1, 1);
            Geometry.GetSquareOfRightTriangle(1, 1, 0);

            Geometry.GetSquareOfRightTriangle(-1, 1, 1);
            Geometry.GetSquareOfRightTriangle(-1, -1, 1);
            Geometry.GetSquareOfRightTriangle(-1, -1, -1);
            Geometry.GetSquareOfRightTriangle(1, -1, 1);
            Geometry.GetSquareOfRightTriangle(1, 1, -1);
        }
    }
}
